{
  "openapi": "3.0.1",
  "info": {
    "title": "SportEventAppApi",
    "version": "1.0"
  },
  "paths": {
    "/sport-objects": {
      "get": {
        "tags": [
          "Object"
        ],
        "summary": "Get all sport objects available in the system",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "Object"
        ],
        "summary": "Create sport object in the system",
        "description": "Sample request:\r\n            \r\n    POST /api/sportobject\r\n    {\r\n        \"name\": \"City Stadium\",\r\n        \"description\": \"Sample description\",\r\n        \"adress\": \"Main Street 123, Krakow\",\r\n        \"city\":\"Krakow\",\r\n        \"objectType\":\"Hall\"\r\n    }",
        "requestBody": {
          "description": "Sport object creation request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateObjectReq"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateObjectReq"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateObjectReq"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the sport object"
          },
          "409": {
            "description": "A conflict occurred, object was not created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/sport-objects/object-base-info": {
      "get": {
        "tags": [
          "Object"
        ],
        "summary": "Get sport objects base info as Id and Name",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/sport-objects/{id}": {
      "get": {
        "tags": [
          "Object"
        ],
        "summary": "Get sport object by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the sport object",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Object"
        ],
        "summary": "Remove sport object from the system (only those objects that do not have any event assigned to them)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the sport object",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the sport object"
          },
          "409": {
            "description": "A conflict occurred, object was not removed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Object"
        ],
        "summary": "Update sport object in the system",
        "description": "Sample request:\r\n            \r\n    PUT /api/sportobject/12\r\n    {\r\n        \"name\": \"City Hall\",\r\n        \"description\": \"Updated description\",\r\n        \"adress\": \"Street 223, Warszawa\",\r\n        \"city\":\"Warszawa\",\r\n        \"objectType\":\"Hall\"\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the sport object",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Sport object update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateObjectReq"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateObjectReq"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateObjectReq"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully created the sport object"
          },
          "409": {
            "description": "A conflict occurred, object was not created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/sport-objects/objects-created-by-user": {
      "get": {
        "tags": [
          "Object"
        ],
        "summary": "Get sport objects which was created by current logged user",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/sportevents/current-user-events": {
      "get": {
        "tags": [
          "SportEvent"
        ],
        "summary": "Get all sport events which user is assigned to",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/sportevents": {
      "get": {
        "tags": [
          "SportEvent"
        ],
        "summary": "Get all sport events available in the system",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "SportEvent"
        ],
        "summary": "Create sport event in the system",
        "description": "Sample request:\r\n            \r\n    POST /api/sportevents\r\n    {\r\n        \"eventName\": \"My event\",\r\n        \"discipline\": \"Football\",\r\n        \"skillLevel\": \"Amateur\",\r\n        \"price\":12,\r\n        \"objectId\":4,\r\n        \"amountOfPlayers\":12,\r\n        \"time\":60,\r\n        \"dateWhen\":\"2024-01-01T12:00:000\",\r\n        \"isMultisportCard\":false\r\n    }",
        "requestBody": {
          "description": "Sport event post request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSportEventReq"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSportEventReq"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSportEventReq"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "409": {
            "description": "A conflict occurred, sport event was not created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "Successfully created the sport event"
          }
        }
      }
    },
    "/sportevents/{id}": {
      "put": {
        "tags": [
          "SportEvent"
        ],
        "summary": "Update sport event in the system",
        "description": "Sample request:\r\n            \r\n    PUT /api/sportevents/12\r\n    {\r\n        \"eventName\": \"My event\",\r\n        \"discipline\": \"Football\",\r\n        \"skillLevel\": \"Amateur\",\r\n        \"price\":12,\r\n        \"objectId\":4,\r\n        \"amountOfPlayers\":12,\r\n        \"time\":60,\r\n        \"dateWhen\":\"2024-01-01T12:00:000\",\r\n        \"isMultisportCard\":false\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the sport event",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Sport event update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSportEventReq"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSportEventReq"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSportEventReq"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully updated the sport event"
          },
          "409": {
            "description": "A conflict occurred, sport event was not updated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SportEvent"
        ],
        "summary": "Remove sport event from the system (only those events that do not have any assigned people to them)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the sport event",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the sport event"
          },
          "409": {
            "description": "A conflict occurred, spot event was not removed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "SportEvent"
        ],
        "summary": "Get sportsevent by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the sports event",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/sportevents/assign-or-remove-from-event/{id}": {
      "put": {
        "tags": [
          "SportEvent"
        ],
        "summary": "Assign or remove yourself from sport event",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the sport event",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "operationType",
            "in": "query",
            "description": "operation type: \"add\" or \"remove\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the sport event"
          },
          "409": {
            "description": "A conflict occurred, sport event was not updated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/sportevents/{id}/people-in-event": {
      "get": {
        "tags": [
          "SportEvent"
        ],
        "summary": "Get people assigned to sport event",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the sport event",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "SportEventAppApi"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "SportEventAppApi"
        ],
        "parameters": [
          {
            "name": "useCookies",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "useSessionCookies",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/refresh": {
      "post": {
        "tags": [
          "SportEventAppApi"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/confirmEmail": {
      "get": {
        "tags": [
          "SportEventAppApi"
        ],
        "operationId": "MapIdentityApi-/confirmEmail",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changedEmail",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/resendConfirmationEmail": {
      "post": {
        "tags": [
          "SportEventAppApi"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendConfirmationEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/forgotPassword": {
      "post": {
        "tags": [
          "SportEventAppApi"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/resetPassword": {
      "post": {
        "tags": [
          "SportEventAppApi"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/manage/2fa": {
      "post": {
        "tags": [
          "SportEventAppApi"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/manage/info": {
      "get": {
        "tags": [
          "SportEventAppApi"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "SportEventAppApi"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/user/user-info": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get current logged user informations",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/user/change-password": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Change password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordReq"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordReq"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "409": {
            "description": "Something went wrong"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessTokenResponse": {
        "type": "object",
        "properties": {
          "tokenType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "expiresIn": {
            "type": "integer",
            "format": "int64"
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordReq": {
        "required": [
          "newPassword",
          "oldPassword"
        ],
        "type": "object",
        "properties": {
          "oldPassword": {
            "minLength": 1,
            "type": "string"
          },
          "newPassword": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Cities": {
        "enum": [
          "Krakow",
          "Warszawa",
          "Gdansk",
          "Poznan",
          "Szczecin",
          "Rzszow",
          "Wroclaw"
        ],
        "type": "string"
      },
      "CreateObjectReq": {
        "required": [
          "adress",
          "city",
          "name",
          "objectType",
          "pricePerHour"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "adress": {
            "minLength": 3,
            "type": "string"
          },
          "city": {
            "$ref": "#/components/schemas/Cities"
          },
          "objectType": {
            "$ref": "#/components/schemas/ObjectTypes"
          },
          "pricePerHour": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "CreateSportEventReq": {
        "required": [
          "amountOfPlayers",
          "dateWhen",
          "discipline",
          "eventName",
          "isMultisportCard",
          "skillLevel",
          "time"
        ],
        "type": "object",
        "properties": {
          "eventName": {
            "minLength": 1,
            "type": "string"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "discipline": {
            "$ref": "#/components/schemas/Disciplines"
          },
          "skillLevel": {
            "$ref": "#/components/schemas/SkillLevel"
          },
          "objectId": {
            "type": "integer",
            "format": "int32"
          },
          "amountOfPlayers": {
            "maximum": 10000,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "time": {
            "maximum": 10000,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "dateWhen": {
            "type": "string",
            "format": "date-time"
          },
          "isMultisportCard": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Disciplines": {
        "enum": [
          "Volleyball",
          "Football",
          "Tenis",
          "Table_tennis",
          "Squash",
          "Badminton",
          "Basketball"
        ],
        "type": "string"
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HttpValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "InfoRequest": {
        "type": "object",
        "properties": {
          "newEmail": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          },
          "oldPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InfoResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "isEmailConfirmed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "twoFactorCode": {
            "type": "string",
            "nullable": true
          },
          "twoFactorRecoveryCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ObjectTypes": {
        "enum": [
          "Hall",
          "Sports_field",
          "Stadium"
        ],
        "type": "string"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "RefreshRequest": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResendConfirmationEmailRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResetPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "resetCode": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SkillLevel": {
        "enum": [
          "Amateur",
          "Intermediate",
          "Professional"
        ],
        "type": "string"
      },
      "TwoFactorRequest": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "nullable": true
          },
          "twoFactorCode": {
            "type": "string",
            "nullable": true
          },
          "resetSharedKey": {
            "type": "boolean"
          },
          "resetRecoveryCodes": {
            "type": "boolean"
          },
          "forgetMachine": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TwoFactorResponse": {
        "type": "object",
        "properties": {
          "sharedKey": {
            "type": "string",
            "nullable": true
          },
          "recoveryCodesLeft": {
            "type": "integer",
            "format": "int32"
          },
          "recoveryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isTwoFactorEnabled": {
            "type": "boolean"
          },
          "isMachineRemembered": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      }
    }
  }
}
